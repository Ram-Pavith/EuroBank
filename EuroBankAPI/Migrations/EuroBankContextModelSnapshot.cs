// <auto-generated />
using System;
using EuroBankAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EuroBankAPI.Migrations
{
    [DbContext(typeof(EuroBankContext))]
    partial class EuroBankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EuroBankAPI.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountCreationStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 4, 11, 9, 19, 58, 402, DateTimeKind.Local).AddTicks(83));

                    b.HasKey("AccountId")
                        .HasName("PK_Account");

                    b.HasIndex("AccountCreationStatusId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");

                    b.HasCheckConstraint("Balance_check", "Balance >= 0");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("b822b0da-1bf2-4294-9eae-96150ca3fb8b"),
                            AccountCreationStatusId = 1,
                            AccountTypeId = 1,
                            Balance = 10000.0,
                            CustomerId = "CustomerEurobank",
                            DateCreated = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AccountId = new Guid("0a599272-c3c7-4746-aae5-75721ac5113f"),
                            AccountCreationStatusId = 1,
                            AccountTypeId = 1,
                            Balance = 10000.0,
                            CustomerId = "CustomerEurobank2",
                            DateCreated = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.AccountCreationStatus", b =>
                {
                    b.Property<int>("AccountCreationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountCreationStatusId"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountCreationStatusId")
                        .HasName("PK_Account_Creation_Status");

                    b.ToTable("AccountCreationStatuses");

                    b.HasData(
                        new
                        {
                            AccountCreationStatusId = 1,
                            Message = "Account Creation Succes"
                        },
                        new
                        {
                            AccountCreationStatusId = 2,
                            Message = "Account Creation Failed"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("AccountTypeId")
                        .HasName("PK_Account_Type");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            AccountTypeId = 1,
                            Type = "Savings"
                        },
                        new
                        {
                            AccountTypeId = 2,
                            Type = "Current"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.CounterParty", b =>
                {
                    b.Property<Guid>("CounterPartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CounterPartyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CounterPartyId");

                    b.ToTable("CounterParties");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CustomerCreationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PanNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerCreationStatusId");

                    b.HasIndex(new[] { "CustomerId" }, "CustomerId")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailId" }, "EmailId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = "CustomerEurobank",
                            Address = "Chennai",
                            CustomerCreationStatusId = 1,
                            DOB = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            EmailId = "Customer@gmail.com",
                            Firstname = "Customer",
                            Lastname = "Eurobank",
                            PanNumber = "LBKTIOPNHW",
                            PasswordHash = new byte[] { 44, 99, 229, 133, 22, 236, 120, 175, 219, 152, 102, 76, 191, 184, 5, 210, 222, 80, 252, 24, 134, 150, 254, 124, 199, 232, 88, 65, 129, 80, 143, 236, 94, 220, 203, 124, 200, 224, 105, 183, 16, 104, 192, 211, 33, 206, 166, 253, 119, 119, 32, 175, 117, 134, 114, 84, 157, 9, 16, 202, 173, 221, 141, 74 },
                            PasswordSalt = new byte[] { 225, 123, 252, 79, 109, 166, 111, 44, 27, 233, 234, 50, 0, 12, 173, 77, 152, 172, 62, 38, 219, 131, 215, 151, 221, 90, 80, 30, 226, 39, 228, 104, 40, 181, 194, 174, 237, 170, 214, 85, 222, 187, 127, 210, 134, 245, 13, 214, 99, 82, 146, 169, 226, 220, 155, 47, 202, 125, 112, 131, 93, 154, 135, 109, 127, 84, 144, 69, 242, 12, 42, 98, 229, 215, 163, 211, 136, 61, 199, 51, 217, 93, 222, 120, 128, 107, 82, 84, 229, 143, 75, 219, 143, 111, 76, 130, 199, 54, 91, 128, 211, 7, 158, 2, 218, 17, 120, 228, 219, 157, 195, 160, 5, 211, 24, 118, 193, 190, 85, 228, 103, 103, 16, 255, 218, 166, 132, 175 },
                            Phone = "4242424242"
                        },
                        new
                        {
                            CustomerId = "CustomerEurobank2",
                            Address = "Chennai",
                            CustomerCreationStatusId = 1,
                            DOB = new DateTime(2023, 4, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            EmailId = "Customer2@gmail.com",
                            Firstname = "Customer",
                            Lastname = "Eurobank",
                            PanNumber = "LBKTIOPNHW",
                            PasswordHash = new byte[] { 44, 99, 229, 133, 22, 236, 120, 175, 219, 152, 102, 76, 191, 184, 5, 210, 222, 80, 252, 24, 134, 150, 254, 124, 199, 232, 88, 65, 129, 80, 143, 236, 94, 220, 203, 124, 200, 224, 105, 183, 16, 104, 192, 211, 33, 206, 166, 253, 119, 119, 32, 175, 117, 134, 114, 84, 157, 9, 16, 202, 173, 221, 141, 74 },
                            PasswordSalt = new byte[] { 225, 123, 252, 79, 109, 166, 111, 44, 27, 233, 234, 50, 0, 12, 173, 77, 152, 172, 62, 38, 219, 131, 215, 151, 221, 90, 80, 30, 226, 39, 228, 104, 40, 181, 194, 174, 237, 170, 214, 85, 222, 187, 127, 210, 134, 245, 13, 214, 99, 82, 146, 169, 226, 220, 155, 47, 202, 125, 112, 131, 93, 154, 135, 109, 127, 84, 144, 69, 242, 12, 42, 98, 229, 215, 163, 211, 136, 61, 199, 51, 217, 93, 222, 120, 128, 107, 82, 84, 229, 143, 75, 219, 143, 111, 76, 130, 199, 54, 91, 128, 211, 7, 158, 2, 218, 17, 120, 228, 219, 157, 195, 160, 5, 211, 24, 118, 193, 190, 85, 228, 103, 103, 16, 255, 218, 166, 132, 175 },
                            Phone = "4242424242"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.CustomerCreationStatus", b =>
                {
                    b.Property<int>("CustomerCreationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerCreationId"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CustomerCreationId");

                    b.HasIndex(new[] { "CustomerCreationId" }, "CustomerCreationStatusId");

                    b.ToTable("CustomerCreationStatuses");

                    b.HasData(
                        new
                        {
                            CustomerCreationId = 1,
                            Message = "Customer Created Successfully"
                        },
                        new
                        {
                            CustomerCreationId = 2,
                            Message = "Customer Creation Failed"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex(new[] { "EmailId" }, "EmailId")
                        .IsUnique()
                        .HasDatabaseName("EmailId1");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("59bc33aa-4fca-4208-a257-9f7e522c42d3"),
                            EmailId = "Employee@gmail.com",
                            Firstname = "Employee",
                            Lastname = "Eurobank",
                            PasswordHash = new byte[] { 46, 174, 31, 247, 57, 63, 66, 164, 207, 113, 131, 15, 82, 113, 122, 13, 36, 124, 231, 245, 181, 92, 209, 142, 7, 222, 70, 40, 140, 162, 44, 12, 140, 20, 147, 79, 22, 23, 97, 208, 240, 158, 11, 61, 147, 12, 227, 103, 3, 229, 255, 102, 92, 145, 214, 246, 103, 146, 135, 128, 55, 28, 8, 98 },
                            PasswordSalt = new byte[] { 168, 229, 206, 135, 94, 168, 32, 135, 189, 238, 81, 242, 210, 36, 152, 93, 38, 215, 53, 239, 193, 3, 107, 66, 172, 176, 29, 237, 202, 117, 7, 81, 147, 73, 195, 73, 80, 124, 84, 66, 70, 55, 197, 49, 121, 196, 83, 181, 0, 174, 75, 17, 16, 34, 56, 70, 123, 104, 86, 115, 222, 49, 208, 188, 185, 203, 90, 38, 186, 195, 45, 248, 246, 231, 73, 126, 243, 142, 13, 144, 169, 224, 192, 204, 68, 171, 198, 183, 214, 167, 87, 155, 201, 22, 15, 44, 232, 231, 85, 10, 249, 70, 75, 140, 149, 149, 89, 109, 229, 252, 46, 53, 249, 57, 168, 28, 117, 39, 92, 153, 80, 69, 115, 197, 232, 39, 135, 241 }
                        },
                        new
                        {
                            EmployeeId = new Guid("f0d1581d-d464-43bf-a846-cff34dab6bf4"),
                            EmailId = "Employee2@gmail.com",
                            Firstname = "Employee",
                            Lastname = "Eurobank",
                            PasswordHash = new byte[] { 46, 174, 31, 247, 57, 63, 66, 164, 207, 113, 131, 15, 82, 113, 122, 13, 36, 124, 231, 245, 181, 92, 209, 142, 7, 222, 70, 40, 140, 162, 44, 12, 140, 20, 147, 79, 22, 23, 97, 208, 240, 158, 11, 61, 147, 12, 227, 103, 3, 229, 255, 102, 92, 145, 214, 246, 103, 146, 135, 128, 55, 28, 8, 98 },
                            PasswordSalt = new byte[] { 168, 229, 206, 135, 94, 168, 32, 135, 189, 238, 81, 242, 210, 36, 152, 93, 38, 215, 53, 239, 193, 3, 107, 66, 172, 176, 29, 237, 202, 117, 7, 81, 147, 73, 195, 73, 80, 124, 84, 66, 70, 55, 197, 49, 121, 196, 83, 181, 0, 174, 75, 17, 16, 34, 56, 70, 123, 104, 86, 115, 222, 49, 208, 188, 185, 203, 90, 38, 186, 195, 45, 248, 246, 231, 73, 126, 243, 142, 13, 144, 169, 224, 192, 204, 68, 171, 198, 183, 214, 167, 87, 155, 201, 22, 15, 44, 232, 231, 85, 10, 249, 70, 75, 140, 149, 149, 89, 109, 229, 252, 46, 53, 249, 57, 168, 28, 117, 39, 92, 153, 80, 69, 115, 197, 232, 39, 135, 241 }
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.RefPaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodCode"), 1L, 1);

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodCode");

                    b.ToTable("RefPaymentMethods");

                    b.HasData(
                        new
                        {
                            PaymentMethodCode = 1,
                            PaymentMethodName = "Card"
                        },
                        new
                        {
                            PaymentMethodCode = 2,
                            PaymentMethodName = "NetBanking"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.RefTransactionStatus", b =>
                {
                    b.Property<int>("TransactionStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionStatusCode"), 1L, 1);

                    b.Property<string>("TransactionStatusDescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionStatusCode");

                    b.ToTable("RefTransactionStatuses");

                    b.HasData(
                        new
                        {
                            TransactionStatusCode = 1,
                            TransactionStatusDescriptions = "Transaction Success"
                        },
                        new
                        {
                            TransactionStatusCode = 2,
                            TransactionStatusDescriptions = "Transaction Failed"
                        },
                        new
                        {
                            TransactionStatusCode = 3,
                            TransactionStatusDescriptions = "Withdrawal Limit Amount Exceeded"
                        },
                        new
                        {
                            TransactionStatusCode = 4,
                            TransactionStatusDescriptions = "Insufficient Balance"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.RefTransactionType", b =>
                {
                    b.Property<int>("TransactionTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeCode"), 1L, 1);

                    b.Property<string>("TransactionTypeDescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionTypeCode");

                    b.ToTable("RefTransactionType");

                    b.HasData(
                        new
                        {
                            TransactionTypeCode = 1,
                            TransactionTypeDescriptions = "Despost"
                        },
                        new
                        {
                            TransactionTypeCode = 2,
                            TransactionTypeDescriptions = "Withdraw"
                        },
                        new
                        {
                            TransactionTypeCode = 3,
                            TransactionTypeDescriptions = "Transfer"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            ServiceName = "NEFT"
                        },
                        new
                        {
                            ServiceId = 2,
                            ServiceName = "RTGS"
                        },
                        new
                        {
                            ServiceId = 3,
                            ServiceName = "IMPS"
                        });
                });

            modelBuilder.Entity("EuroBankAPI.Models.Statement", b =>
                {
                    b.Property<int>("StatementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatementId"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ClosingBalance")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Withdrawal")
                        .HasColumnType("float");

                    b.HasKey("StatementId")
                        .HasName("PK_Statement_ID");

                    b.HasIndex("AccountId");

                    b.ToTable("Statements");

                    b.HasCheckConstraint("ClosingBalance_Check", "ClosingBalance >= 0");

                    b.HasCheckConstraint("Withdrawal_Check", "Withdrawal >= 0");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountOfTransaction")
                        .HasColumnType("float");

                    b.Property<Guid>("CounterPartyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfTransaction")
                        .HasColumnType("datetime2");

                    b.Property<int>("RefPaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("RefTransactionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RefTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CounterPartyId");

                    b.HasIndex("RefPaymentMethodId");

                    b.HasIndex("RefTransactionStatusId");

                    b.HasIndex("RefTransactionTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EuroBankAPI.Models.TransactionStatus", b =>
                {
                    b.Property<int>("TransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionStatusId"), 1L, 1);

                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<double>("SourceBalance")
                        .HasColumnType("float");

                    b.HasKey("TransactionStatusId")
                        .HasName("PK_Transaction_Status");

                    b.HasIndex("AccountId");

                    b.ToTable("TransactionStatuses");

                    b.HasCheckConstraint("SourceBalance_Check", "SourceBalance >= 0");
                });

            modelBuilder.Entity("EuroBankAPI.Models.UserAuth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAuths");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Account", b =>
                {
                    b.HasOne("EuroBankAPI.Models.AccountCreationStatus", "AccountCreationStatus")
                        .WithMany()
                        .HasForeignKey("AccountCreationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EuroBankAPI.Models.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EuroBankAPI.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountCreationStatus");

                    b.Navigation("AccountType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Customer", b =>
                {
                    b.HasOne("EuroBankAPI.Models.CustomerCreationStatus", "CustomerCreationStatus")
                        .WithMany()
                        .HasForeignKey("CustomerCreationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerCreationStatus");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Statement", b =>
                {
                    b.HasOne("EuroBankAPI.Models.Account", "Account")
                        .WithMany("Statements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Transaction", b =>
                {
                    b.HasOne("EuroBankAPI.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EuroBankAPI.Models.CounterParty", "CounterParty")
                        .WithMany("Transactions")
                        .HasForeignKey("CounterPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_CounterParty");

                    b.HasOne("EuroBankAPI.Models.RefPaymentMethod", "RefPaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("RefPaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_RefPaymentMethod");

                    b.HasOne("EuroBankAPI.Models.RefTransactionStatus", "RefTransactionStatus")
                        .WithMany("Transactions")
                        .HasForeignKey("RefTransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_RefTransactionStatus");

                    b.HasOne("EuroBankAPI.Models.RefTransactionType", "RefTransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("RefTransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_RefTransactionType");

                    b.HasOne("EuroBankAPI.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CounterParty");

                    b.Navigation("RefPaymentMethod");

                    b.Navigation("RefTransactionStatus");

                    b.Navigation("RefTransactionType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("EuroBankAPI.Models.TransactionStatus", b =>
                {
                    b.HasOne("EuroBankAPI.Models.Account", "Account")
                        .WithMany("TransactionStatuses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Account", b =>
                {
                    b.Navigation("Statements");

                    b.Navigation("TransactionStatuses");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EuroBankAPI.Models.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("EuroBankAPI.Models.CounterParty", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EuroBankAPI.Models.Customer", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("EuroBankAPI.Models.RefPaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EuroBankAPI.Models.RefTransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EuroBankAPI.Models.RefTransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
